(define (Miller-Rabin n)
  (define (mulmod x y)
	(remainder (* x y)
			   n))
  (define (squaremod x)
	(mulmod x x))
  (define (nontrivial-root? root)
	(cond ((or (= root 1) (= root (- n 1))) #f)
		  ((= (squaremod root) 1) #t)
		  (else #f)))
  (define (watch b)
	(cond ((nontrivial-root? b) 0)
		  (else (squaremod b))))
  ;return a^b mod n
  (define (compute a b)
	(cond ((= b 0) 1)
		  ((even? b) (watch (compute a
									 (/ b 2))))
		  (else (mulmod a (compute a
								   (- b 1)))
				)))
  (= (compute (+ (random (- n 1)) 1)
			  (- n 1))
	 1))

(define (isprime? n times)
  (cond ((= times 0) #t)
		((Miller-Rabin n) (isprime? n (- times 1)))
		(else #f)))

(define (next-prime num)
  (cond ((isprime? num 32) num)
		(else (next-prime (+ num 1)))))
;(begin
  ;(display (isprime? 13 4))
  ;(newline)
  ;)
(define (next num)
  (+ num 1))

(begin
  (display (next-prime 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
  (newline)
  (display (isprime? 561 64))
  (newline)
  (display (isprime? 1105 64))
  (newline)
  (display (isprime? 1729 64))
  (newline)
  (display (isprime? 2465 64))
  (newline)
  (display (isprime? 2821 64))
  (newline)
  (display (isprime? 6601 64))
  (newline)
  )
