(define (filtered-accumulate filter combiner null-value term a next b)
  (define (iter a result)
	(if (> a b)
	  result
	  (iter (next a) (combiner (cond ((filter a) (term a))
									 (#t null-value))
							   result))))
  (iter a null-value))

(define (prime-sum a next b)
  (define (prime? a)
	(define (square x)
	  (* x x))
	(define (judge n)
	  (cond ((> (square n) a) #t)
			((= (remainder a n) 0) #f)
			(#t (judge (+ n 1)))))
	(and (> a 1) (judge 2)))
  (define (self x) x)
  (filtered-accumulate prime? + 0 self a next b))
