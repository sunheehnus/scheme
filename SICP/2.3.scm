(define (make-segment start-point end-point)
  (cons start-point end-point))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))

(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

;task #1
(define (make-rectangular length1 length2 width1 width2)
  (cons (cons length1 length2)
		(cons width1 width2)))

(define (length1-rectangular rect)
  (car (car rect)))
(define (length2-rectangular rect)
  (cdr (car rect)))
(define (width1-rectangular rect)
  (car (cdr rect)))
(define (width2-rectangular rect)
  (cdr (cdr rect)))

(define (len segment)
  (define (square x)
	(* x x))
  (let ((start-point (start-segment segment))
		(end-point (end-segment segment)))
	(sqrt (+ (square (- (x-point start-point) (x-point end-point)))
			 (square (- (y-point start-point) (y-point end-point)))))))

(define (length-rectangular rect)
  (len (length1-rectangular rect)))

(define (width-rectangular rect)
  (len (width1-rectangular rect)))

(define (perimeter-rectangular r)
  (* (+ (length-rectangular r) (width-rectangular r))
	 2))
(define (area-rectangular r)
  (* (length-rectangular r) (width-rectangular r)))

(define rect (make-rectangular (make-segment (make-point 1 4)
											 (make-point 4 4))
							   (make-segment (make-point 1 2)
											 (make-point 4 2))
							   (make-segment (make-point 1 2)
											 (make-point 1 4))
							   (make-segment (make-point 4 2)
											 (make-point 4 4))))

(define (print-segment segname segment)
  (display segname)
  (display ":")
  (print-point (start-segment segment))
  (print-point (end-segment segment))
  (newline))
(define (print-rectangular rect)
  (print-segment "length1" (length1-rectangular rect))
  (print-segment "length2" (length2-rectangular rect))
  (print-segment "width1" (width1-rectangular rect))
  (print-segment "width2" (width2-rectangular rect)))

(print-rectangular rect)
(display "perimeter:")
(display (perimeter-rectangular rect))
(newline)
(display "area:")
(display (area-rectangular rect))
(newline)

;task #2
(define (make-rectangular length-segment width-segment)
  (cons length-segment width-segment))

(define (length-segment rect) (car rect))
(define (width-segment rect) (cdr rect))

(define (length-rectangular rect)
  (len (length-segment rect)))

(define (width-rectangular rect)
  (len (width-segment rect)))

(define rect (make-rectangular (make-segment (make-point 1 4)
											 (make-point 4 4))
							   (make-segment (make-point 1 2)
											 (make-point 1 4))))
(display "perimeter:")
(display (perimeter-rectangular rect))
(newline)
(display "area:")
(display (area-rectangular rect))
(newline)
