(define (fixed-point f first-guess)
  (define tolerance 0.0001)
  (define (close-enough? x y)
	(< (abs (- x y)) tolerance))
  (define (iter guess)
	((lambda (next)
	   (display "\t")
	   (display next)
	   (newline)
	   (if (close-enough? guess next)
		 next
		 (iter next)))
	 (f guess)))
  (iter first-guess))

(define (func-without_averdamp)
  (fixed-point (lambda (x) (/ (log 1000) (log x)))
			   2.0))
(define (func-with_averdamp)
  (define (average x y)
	(/ (+ x y) 2))
  (fixed-point (lambda (x) (average (/ (log 1000) (log x)) x))
			   2.0))
(display "func-without_averdamp:")
(newline)
(func-without_averdamp)
(display "func-with_averdamp:")
(newline)
(func-with_averdamp)
