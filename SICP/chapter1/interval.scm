(define (make-interval a b) (cons a b))
(define (upper-bound interval) (cdr interval))
(define (lower-bound interval) (car interval))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
				 (+ (upper-bound x) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
				 (- (upper-bound x) (lower-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
		(p2 (* (lower-bound x) (upper-bound y)))
		(p3 (* (upper-bound x) (lower-bound y)))
		(p4 (* (upper-bound x) (upper-bound y))))
	(make-interval (min p1 p2 p3 p4)
				   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (if (<= (* (upper-bound y) (lower-bound y)) 0)
	#f
	(mul-interval x
				  (make-interval (/ 1.0 (upper-bound y))
								 (/ 1.0 (lower-bound y))))))

(define (mul-interval x y)
  (let ((lx (lower-bound x))
		(ux (upper-bound x))
		(ly (lower-bound y))
		(uy (upper-bound y)))
	(let ((neg-lx? (negative? lx))
		  (neg-ux? (negative? ux))
		  (neg-ly? (negative? ly))
		  (neg-uy? (negative? uy)))
	  (cond ((and (not neg-lx?) (not neg-ly?)) (make-interval (* lx ly) (* ux uy)))
			((and (not neg-lx?) neg-ly? (not neg-uy?)) (make-interval (* ux ly) (* ux uy)))
			((and (not neg-lx?) neg-uy?) (make-interval (* ux ly) (* lx uy)))
			((and neg-lx? (not neg-ux?) (not neg-ly?)) (make-interval (* lx uy) (* ux uy)))
			((and neg-lx? (not neg-ux?) neg-ly? (not neg-uy?)) (let ((l1 (* ux ly))
																	 (l2 (* lx uy))
																	 (u1 (* ux uy))
																	 (u2 (* lx ly)))
																 (make-interval (min l1 l2) (max u1 u2))))
			((and neg-lx? (not neg-ux?) neg-uy?) (make-interval (* ux ly) (* lx ly)))
			((and neg-ux? (not neg-ly?)) (make-interval (* lx uy) (* ux ly)))
			((and neg-ux? neg-ly? (not neg-uy?)) (make-interval (* lx uy) (* lx ly)))
			((and neg-ux? neg-uy?) (make-interval (* ux uy) (* lx ly)))))))

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

(define (make-center-percent c p)
	(make-center-width c (* c (/ p 100))))

(define (percent i)
  (* (/ (width i) (center i)) 100))

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
				(add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
	(div-interval one
				  (add-interval (div-interval one r1)
								(div-interval one r2)))))

(define test1 (make-center-width 2 1))
(define test2 (make-center-width 3 2))
(display test1)
(newline)
(display test2)
(newline)
(display (div-interval test2 test2))
(newline)
(display (div-interval test1 test2))
(newline)
(display (par1 test1 test2))
(newline)
(display (par2 test1 test2))
(newline)
