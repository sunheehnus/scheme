(define (deriv exp var)
  (cond ((number? exp) 0)
		((variable? exp) (if (same-variable? exp var)
						   1
						   0))
		((sum? exp) (make-sum (deriv (addend exp) var)
							  (deriv (augend exp) var)))
		((product? exp) (make-sum (make-product (multiplier exp)
												(deriv (multiplicand exp) var))
								  (make-product (deriv (multiplier exp) var)
												(multiplicand exp))))
		((exponentiation? exp) (if (number? (exponent exp))
								 (make-product (make-product (exponent exp)
															 (make-exponentiation (base exp) (- (exponent exp) 1)))
											   (deriv (base exp) var))))
		(else #f)))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
		((=number? a2 0) a1)
		((and (number? a1) (number? a2)) (+ a1 a2))
		(else (list '+ a1 a2))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
		((=number? m1 1) m2)
		((=number? m2 1) m1)
		((and (number? m1) (number? m2)) (* m1 m2))
		(else (list '* m1 m2))))

(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
		((=number? e 1) b)
		((=number? b 0) 0)
		;((and (number? e) (< e 0)) ())
		(else (list '** b e))))

(define (=number? exp num)
  (and (number? exp) (eq? exp num)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s)
  (let ((aug (cddr s)))
	(if (null? (cdr aug))
	  (car aug)
	  (cons '+ aug))))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (let ((cand (cddr p)))
	(if (null? (cdr cand))
	  (car cand)
	  (cons '* cand))))

(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))

(display (deriv '(+ x 3) 'x))
(newline)
(display (deriv '(* x y) 'x))
(newline)
(display (deriv '(* (* x y) (+ x 3)) 'x))
(newline)
(display (deriv '(+ (** x 4) (* x 3)) 'x))
(newline)
(display (deriv '(* x y (+ x 3)) 'x))
(newline)

(define (make-prefix middle)
  (cond ((null? (cdr middle)) (car middle))
		(else (cond ((eq? (cadr middle) +) (make-sum (car middle) (make-prefix (cddr middle))))
					((eq? (cadr middle) *) (make-product (car middle) (make-prefix (caddr middle))))))))
(display
  (make-prefix '(x + (3 *  (x + (y + 2)))))
  )

(define (make-prefix middle)
  (define (make-final flag head-element rear-element)
	(cond ((eq? flag +) (make-sum head-element rear-element))
		  ((eq? flag *) (make-product head-element rear-element))))
  (define (make-with-priority flag head-element rear-element middle)
	(if (null? middle)
	  (make-final flag head-element rear-element)
	  (else (let ((next-flag (car middle))
				  (next-element (make-prefix (cadr middle)))
				  (next-middle (cddr middle)))
			  (if (high? next-flag flag)
				(make-with-priority flag
									head-element
									(make-one-step next-flag rear-element next-element)
									next-middle
									)
				(make-with-priority next-flag
									(make-one-step flag head-element rear-element)
									next-element
									next-middle
									))))))
  (cond ((not (pair? middle)) middle)
		((null? (cdr middle)) (car middle))
		(else (let ((flag (cadr middle))
					(head-element (make-prefix (car middle)))
					(rear-element (makr-prefix (caddr middle)))
					(next-middle (cdddr middle)))
				(make-with-priority flag head-element rear-element next-middle)
				)
			  )
		)
  )
