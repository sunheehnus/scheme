(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
  (list left
		right
		(append (symbols left) (symbols right))
		(+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
	(list (symbol-leaf tree))
	(caddr tree)))
(define (weight tree)
  (if (leaf? tree)
	(weight-leaf tree)
	(cadddr tree)))
(define (decode bits tree)
  (define (decode-1 bits current-branch)
	(if (null? bits)
	  '()
	  (let ((next-branch (choose-branch (car bits) current-branch)))
		(if (leaf? next-branch)
		  (cons (symbol-leaf next-branch) (decode-1 (cdr bits) tree))
		  (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
		((= bit 1) (right-branch branch))
		(else (error "bad bit -- CHOOSE-BRANCH" bit))))
(define (adjoin-set x set)
  (cond ((null? set) (list x))
		((< (weight x) (weight (car set))) (cons x set))
		(else (cons (car set)
					(adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
  (if (null? pairs)
	'()
	(let ((pair (car pairs)))
	  (adjoin-set (make-leaf (car pair) (cadr pair))
				  (make-leaf-set (cdr pairs))))))

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
				  (make-code-tree
					(make-leaf 'B 2)
					(make-code-tree (make-leaf 'D 1)
									(make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(display (decode sample-message sample-tree))
(newline)

(define (encode message tree)
  (if (null? message)
	'()
	(append (encode-symbol (car message) tree)
			(encode (cdr message) tree))))
(define (encode-symbol element tree)
  (if (leaf? tree)
	(let ((elements (symbols tree)))
	  (if (include? element elements)
		'()
		(else (error "bad bit -- CHOOSE-BRANCH" bit))))
	(let ((lelements (symbols (left-branch tree)))
		  (relements (symbols (right-branch tree))))
	  (cond ((include? element lelements) (cons '0 (encode-symbol element (left-branch tree))))
			((include? element relements) (cons '1 (encode-symbol element (right-branch tree))))
			(else (error "bad element" element)))
	  )))
(define (include? element elements)
  (cond ((null? elements) #f)
		((eq? element (car elements)) #t)
		(else (include? element (cdr elements)))))

(define sample-message '(A D A B B C A))
(display (encode sample-message sample-tree))
(newline)

(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))

(define (successive-merge nodes)
  (if (null? (cdr nodes))
	(car nodes)
	(successive-merge (adjoin-set (make-code-tree (car nodes) (cadr nodes))
								  (cddr nodes)))))

(define (print-huffman-tree huffman-tree)
  (define (format-output content level)
	(if (> level 0)
	  (begin
		(display "		")
		(format-output content (- level 1)))
	  (begin
		(display "|-")
		(display content)
		(newline))))
  (define (print htree level)
	(if (leaf? htree)
	  (format-output (append (symbols htree) (weight htree)) level)
	  (begin
		(print (left-branch htree) (+ level 1))
		(format-output (append (symbols htree) (weight htree)) level)
		(print (right-branch htree) (+ level 1)))))
  (print huffman-tree 0))

;(display (generate-huffman-tree '((A 2) (NA 16) (BOOM 1) (SHA 3) (GET 2) (YIP 9) (JOB 2) (WAH 1))))
(print-huffman-tree (generate-huffman-tree '((A 2) (NA 16) (BOOM 1) (SHA 3) (GET 2) (YIP 9) (JOB 2) (WAH 1))))
(newline)
